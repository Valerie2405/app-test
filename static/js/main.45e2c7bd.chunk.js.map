{"version":3,"sources":["components/Search.js","components/Result.js","components/Results.js","components/Popup.js","App.js","reportWebVitals.js","index.js"],"names":["Search","handleInput","search","className","type","placeholder","onChange","onKeyPress","Result","result","openPopup","onClick","imdbID","src","Poster","Title","Results","results","map","Popup","selected","closedPopup","Year","Director","Released","Genre","App","useState","s","totalResults","state","setState","apiurl","e","target","value","prevState","console","log","key","axios","then","data","total_results","id","previousLabel","nextLabel","breakLabel","breakClassName","onPageChange","pageNumber","currentPage","activeClassName","containerClassName","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.45e2c7bd.chunk.js","sourcesContent":["import React from 'react'\r\n/**\r\n * Search function \r\n * @param {handleInput} handleInput handleinput method\r\n * @param {search} search search method\r\n * @returns film that was searched by user\r\n */\r\nfunction Search({ handleInput, search }) {\r\n    return(\r\n        <section className=\"searchbox-wrap\">\r\n            <input \r\n            type=\"text\" \r\n            placeholder=\"Search for your favorite movie here...\" \r\n            className=\"searchbox\" \r\n            //handles the input:\r\n            onChange={handleInput}\r\n            //when key is pressed function is started\r\n            onKeyPress={search}\r\n            />\r\n            \r\n        </section>\r\n    )\r\n}\r\nexport default Search;\r\n","import React from 'react'\r\n/**\r\n * Component for one movie\r\n * @param {result} result represents one single film\r\n * @param {openPopup} openPopup takes in the movie's id \r\n * @returns the title and poster for one movie\r\n */\r\nfunction Result({result,openPopup}) {\r\n    return (\r\n        <div className=\"result\" onClick={() => openPopup(result.imdbID)}>\r\n            <img src ={result.Poster} />\r\n            <figcaption>\r\n                <h3 className=\"movieTitle\">{result.Title}</h3>\r\n            </figcaption>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Result","import React from 'react'\r\nimport Result from './Result'\r\n\r\n/**\r\n * Takes in two parameters\r\n * @param {results} results an array containing movies\r\n * @param {openPopup} openPopup when a movie is clicked\r\n * @returns all movies each have it's own imbid key\r\n */\r\nfunction Results({results,openPopup}) {\r\n    if(!results) {\r\n        return <p>Sorry please try a different Movie Title :) </p>\r\n    } \r\n   \r\n    return (\r\n        <section className=\"results\">\r\n\r\n            {results && results.map(result =>(\r\n                // each child so result should have their own unique key\r\n                // using the imbID as their key \r\n                <Result key={result.imdbID} result={result} openPopup={openPopup} />\r\n            ))}\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Results","import React from 'react'\r\n/**\r\n * Component created to handle the page when a movie is clicked\r\n * @param {selected} selected what was selected\r\n * @param {closedPopup} closedpopup represents the closedpopup const in app\r\n * @returns information for movie selected\r\n */\r\nfunction Popup({selected,closedPopup}){\r\n    return(\r\n        <section className=\"popup\">\r\n            <div className=\"information\">\r\n                <p className=\"title\"> <h2>{selected.Title}</h2> </p>\r\n                <p className=\"year\"> <h5>Year: {selected.Year}</h5> </p>\r\n                <p className=\"director\"> <h5>Director: {selected.Director}</h5> </p>                \r\n                <p className=\"releasedate\"> <h5>Release Date: {selected.Released}</h5></p>\r\n                <p className=\"genre\"> <h5>Genre: {selected.Genre}</h5></p>\r\n\r\n                <div className=\"poster\">\r\n                    <img src={selected.Poster} />\r\n                </div>\r\n                <button className=\"exit\" onClick={closedPopup}>Exit</button>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Popup","import Search from './components/Search'\nimport Results from './components/Results'\nimport Popup from './components/Popup'\nimport axios from 'axios'\nimport React, \n {useState} from 'react'\nimport ReactPagination from 'react-paginate';\n\n/**\n * This is the function App where the request from the API is done\n * as well as where two different events are handled the input and page change\n * @returns the three main components: Search Bar component, Result Component,\n *          and Popup Component \n */\nfunction App() {\n  const [state, setState] = useState ( {\n    s:'', // search query\n    results:[], \n    selected: {},\n    totalResults : 0, // # of movies requeted from api\n  } );\n\n\n  // api url\n  const apiurl = 'https://www.omdbapi.com/?apikey=7f581b67'\n\n  /**\n   * Search const using axios library to help get the movie data from the OIMBD api\n   * @param {Event} e when user preses the enter key\n   */\n  const search  = (e) => {\n    if (e.key === \"Enter\") {\n      axios(apiurl+ \"&s=\" + state.s).then(({data})=> {\n        let results = data.Search;\n        //updating the list of results with the current result \n        // and storing the informatin \n        setState(prevState => {\n          return {...prevState, results: results,totalResults:data.total_results}\n        })\n        console.log(data)\n      });\n    }\n  }\n\n\n//handle event: preserve what user types in search box\n/**\n * const handles the users input by setting to previous state\n * to not over run the other state\n * @param {Event} e \n */\n  const handleInput = (e) => {\n    let s = e.target.value;\n    setState(prevState => {\n      return {...prevState, s:s} \n    });\n    \n    console.log(state.s);\n  }\n  \n  /**\n   * updates the page when pagination is clicked\n   * @param {pageNumber} pageNumber represents the page number one has clicked\n   */\n  const handlePageChange = (pageNumber) => {\n    \n    axios(apiurl+ \"&s=\" + state.s+\"&page=\"+{pageNumber}).then(({data})=> {\n      let results = data.Search;\n      //updating the list of results with the current result \n      // and storing the informatin\n      setState(prevState => {\n        return {...prevState, results: results, currentPage:pageNumber}\n      })\n      console.log(data)\n      console.log(pageNumber)\n  })\n\n}\n \n  /**\n   * handles when a movie is clicked\n   * @param {id} id represents the imbd id\n   */\n  const openPopup= id => {\n    axios(apiurl + \"&i=\" + id).then(({data}) => {\n      let result = data;\n      console.log(result);\n\n      setState(prevState => {\n        return {...prevState, selected: result}\n      });\n    });\n  }\n  /**\n   * handles when exit button is clicked\n   */\n  const closedPopup = () => {\n    setState(prevState => {\n      return {...prevState, selected: {}}\n    });\n  }\n\n /**\n  * returns the three main components\n  *   search bar component\n  *   result component\n  *   popupcomponent\n  * also handles the pagination\n  */\n  return (\n    <div className=\"App\">\n      <header>\n       <h1> Let's find your favorite Movie !</h1> \n      </header>\n      <main> \n        <Search handleInput={handleInput} search = {search} />\n        <Results results={state.results} openPopup={openPopup}/>\n\n     {(typeof state.selected.Title != \"undefined\") ? <Popup selected={state.selected} closedPopup={closedPopup} /> : false}\n     \n     <ReactPagination\n         previousLabel={\"previous\"}\n         nextLabel={\"next\"}\n         breakLabel={\"...\"}\n         breakClassName={\"break-me\"}\n         onPageChange={handlePageChange}\n         activeClassName={\"active\"}\n         containerClassName={\"pagination\"}\n         />\n      </main>\n    </div>\n  );\n\n}\n\nexport default App\n\n    ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}